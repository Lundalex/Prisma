#pragma kernel SimulateRB_P // 0 
#pragma kernel SimulateRB_RB // 1
#pragma kernel SimulateRBSprings // 2
#pragma kernel AdjustRBDatas // 3
#pragma kernel ResetRBVertices // 4
#pragma kernel UpdateRigidBodies // 5
#pragma kernel UpdateRBVertices // 6

#pragma multi_compile _ DO_USE_FAST_COMPILATION

#include "./Helpers/DataTypes.hlsl"
#include "./Helpers/Constants.hlsl"
#include "./Helpers/MathResources.hlsl"

const uint2 BoundaryDims;
const float RigidBodyPadding;
const float BoundaryElasticity;
const float BoundaryFriction;

const uint NumRigidBodies;
const uint NumVectors;
const uint NumParticles;
const int2 ChunksNum;
const uint ChunksNumAll;
const uint PTypesNum;

const bool AllowLinkedRBCollisions;
const float RB_RBCollisionCorrectionFactor;
const float RB_RBFixedCollisionCorrection;
const float RB_RBRigidConstraintCorrectionFactor;

const float MaxRBRotVel;
const float MaxRBVel;
const float MinRBVelForMovement;

const float RB_MaxInteractionRadius;
const float RB_InteractionAttractionPower;
const float RB_InteractionRepulsionPower;
const float RB_InteractionDampening;

const float DeltaTime;
const float RLDeltaTime;
const float SimTimeElapsed;
const float2 MousePos;
const bool LMousePressed;
const bool RMousePressed;

StructuredBuffer<int2> SpatialLookup; 
StructuredBuffer<PType> PTypes;
RWStructuredBuffer<PData> PDatas;

RWStructuredBuffer<RigidBody> RigidBodies;
RWStructuredBuffer<RBVector> RBVectors;
RWStructuredBuffer<RBAdjustment> RBAdjustments;

RWStructuredBuffer<RecordedFluidData> RecordedFluidDatas;

int GetChunkKey(int2 chunk)
{
    return chunk.y * ChunksNum.x + chunk.x;
}

int2 GetChunk(float2 pos)
{
    return int2(clamp((int)pos.x, 0, ChunksNum.x - 1), clamp((int)pos.y, 0, ChunksNum.y - 1));
}

int Extract_LastChunkKey(int LastChunkKey_PType_POrder)
{
    return (uint)LastChunkKey_PType_POrder % ChunksNumAll;
}

void AccumulateDeltaVel(int index, int2 deltaVel_Int2)
{
    InterlockedAdd(RBAdjustments[index].deltaVel_Int2.x, deltaVel_Int2.x);
    InterlockedAdd(RBAdjustments[index].deltaVel_Int2.y, deltaVel_Int2.y);
}

void AccumulateDeltaRotVel(int index, int deltaRotVel_Int)
{
    InterlockedAdd(RBAdjustments[index].deltaRotVel_Int, deltaRotVel_Int);
}

void AccumulateDeltaPos(int index, int2 deltaPos_Int2)
{
    InterlockedAdd(RBAdjustments[index].deltaPos_Int2.x, deltaPos_Int2.x);
    InterlockedAdd(RBAdjustments[index].deltaPos_Int2.y, deltaPos_Int2.y);
}

void AccumulateSpringForce(int index, int2 springForce_Int)
{
    InterlockedAdd(RBAdjustments[index].recordedSpringForce_Int2.x, springForce_Int.x);
    InterlockedAdd(RBAdjustments[index].recordedSpringForce_Int2.y, springForce_Int.y);
}

void AccumulateFrictionForce(int index, int2 frictionForce_Int2)
{
    InterlockedAdd(RBAdjustments[index].recordedFrictionForce_Int2.x, frictionForce_Int2.x);
    InterlockedAdd(RBAdjustments[index].recordedFrictionForce_Int2.y, frictionForce_Int2.y);
}

bool IsPointInsideRB(float2 pos, RigidBody rb)
{
    pos -= rb.pos;

    uint intersections = 0;
    uint startIndex = rb.startIndex;
    uint endIndex = rb.endIndex;
    uint numVertices = endIndex - startIndex + 1;
    uint pathStartIndex = startIndex;
    
    float2 firstPathVec = RBVectors[startIndex].pos;
    float2 lastVec = firstPathVec;

    for (uint i = 1; i <= numVertices; i++)
    {
        uint vecIndex = (i == numVertices) ? pathStartIndex : (startIndex + i);
        float2 newVec = RBVectors[vecIndex].pos;

        bool newPathFlag = (newVec.x > PATH_FLAG_THRESHOLD);
        if (newPathFlag)
        {
            if (IsPointToTheLeftOfLine(pos, lastVec, firstPathVec)) intersections++;

            newVec.x -= PATH_FLAG_OFFSET;

            firstPathVec = newVec;
            lastVec = newVec;
            pathStartIndex = vecIndex;
        }
        else
        {
            if (IsPointToTheLeftOfLine(pos, lastVec, newVec)) intersections++;

            lastVec = newVec;
        }
    }

    return ((intersections % 2) == 1);
}

RBHitInfo RayRBDstHitInfo(float2 pos, RigidBody rb)
{
    float2 localPos = pos - rb.pos;

    RBHitInfo rbHitInfo = InitRBHitInfo();
    float minDstSqr     = 1.#INF;

    uint intersections = 0;
    uint startIndex = rb.startIndex;
    uint endIndex = rb.endIndex;
    uint numVertices = endIndex - startIndex + 1;
    uint pathStartIndex = startIndex;
    
    float2 firstPathVec = RBVectors[startIndex].pos;
    float2 lastVec = firstPathVec;

    for (uint i = 1; i <= numVertices; i++)
    {
        uint vecIndex = (i == numVertices) ? pathStartIndex : (startIndex + i);
        float2 newVec = RBVectors[vecIndex].pos;

        bool newPathFlag = (newVec.x > PATH_FLAG_THRESHOLD);
        if (newPathFlag)
        {
            float2 dst = DstToLineSegment(lastVec, firstPathVec, localPos);
            float dstSqr = dot2(dst);
            if (dstSqr < minDstSqr)
            {
                minDstSqr = dstSqr;
                rbHitInfo.hitPoint = pos + dst;
                rbHitInfo.pointPos = pos;
                rbHitInfo.lineVec = (firstPathVec - lastVec);
            }

            newVec.x -= PATH_FLAG_OFFSET;
            firstPathVec = newVec;
            lastVec = newVec;
            pathStartIndex = vecIndex;
        }
        else
        {
            float2 dst = DstToLineSegment(lastVec, newVec, localPos);
            float dstSqr = dot2(dst);
            if (dstSqr < minDstSqr)
            {
                minDstSqr = dstSqr;
                rbHitInfo.hitPoint = pos + dst;
                rbHitInfo.pointPos = pos;
                rbHitInfo.lineVec = (newVec - lastVec);
            }

            lastVec = newVec;
        }
    }

    rbHitInfo.dst = (minDstSqr == 1.#INF) ? 1.#INF : sqrt(minDstSqr);
    rbHitInfo.lineVec = normalize(rbHitInfo.lineVec);

    return rbHitInfo;
}

bool EnsureNoPathMarker(inout float2 a)
{
    bool newPathFlag = a.x > PATH_FLAG_THRESHOLD;
    if (newPathFlag) a.x -= PATH_FLAG_OFFSET;

    return newPathFlag;
}

bool SegmentsIntersectRB(float2 p1, float2 p2, float2 q1, float2 q2, out float2 ip, out float2 dirA, out float2 dirB)
{
    float2 r = p2 - p1;
    float2 s = q2 - q1;
    dirA = (length(r) > EPSILON) ? r / length(r) : float2(1,0);
    dirB = (length(s) > EPSILON) ? s / length(s) : float2(1,0);

    float rxs = cross2D(r, s);
    float2 qp = q1 - p1;
    float qpxr = cross2D(qp, r);

    // Collinear
    if (abs(rxs) <= EPSILON && abs(qpxr) <= EPSILON)
    {
        float rr = dot(r, r);
        if (rr <= EPSILON) { ip = 0; return false; } // degenerate
        float t0 = dot(q1 - p1, r) / rr;
        float t1 = t0 + dot(s, r) / rr;

        float tmin = min(t0, t1);
        float tmax = max(t0, t1);
        if (tmax < 0.0 || tmin > 1.0) { ip = 0; return false; } // disjoint

        // Clamp overlap to [0,1] and pick midpoint for contact
        float ta = clamp(tmin, 0.0, 1.0);
        float tb = clamp(tmax, 0.0, 1.0);
        float tm = 0.5 * (ta + tb);
        ip = p1 + r * tm;
        return true;
    }

    // Parallel & non-intersecting
    if (abs(rxs) <= EPSILON)
    {
        ip = 0;
        return false;
    }

    float t = cross2D(qp, s) / rxs;
    float u = cross2D(qp, r) / rxs;

    if (t >= -1e-6 && t <= 1.0 + 1e-6 && u >= -1e-6 && u <= 1.0 + 1e-6)
    {
        ip = p1 + r * clamp(t, 0.0, 1.0);
        return true;
    }

    ip = 0;
    return false;
}

bool FindRB_EdgeEdgeContact(in RigidBody rbA, in RigidBody rbB, out RBHitInfo info, out bool AInsideB_BInsideA)
{
    info = InitRBHitInfo();
    AInsideB_BInsideA = false; // treat as "A against B's edge" for normal orientation

    uint startA = rbA.startIndex;
    uint endA   = rbA.endIndex;
    uint numA   = endA - startA + 1;

    // Iterate edges of A
    float2 firstA = RBVectors[startA].pos;
    float2 lastA  = firstA;
    uint pathStartA = startA;

    for (uint ia = 1; ia <= numA; ia++)
    {
        uint idxA = (ia == numA) ? pathStartA : (startA + ia);
        float2 newA = RBVectors[idxA].pos;
        bool newPathFlagA = (newA.x > PATH_FLAG_THRESHOLD);

        float2 a1 = lastA; 
        float2 a2 = newPathFlagA ? firstA : newA;

        // Build world positions (strip path markers)
        EnsureNoPathMarker(a1);
        EnsureNoPathMarker(a2);
        float2 a1w = a1 + rbA.pos;
        float2 a2w = a2 + rbA.pos;

        // Iterate edges of B (inner loop)
        uint startB = rbB.startIndex;
        uint endB   = rbB.endIndex;
        uint numB   = endB - startB + 1;

        float2 firstB = RBVectors[startB].pos;
        float2 lastB  = firstB;
        uint pathStartB = startB;

        for (uint ib = 1; ib <= numB; ib++)
        {
            uint idxB = (ib == numB) ? pathStartB : (startB + ib);
            float2 newB = RBVectors[idxB].pos;
            bool newPathFlagB = (newB.x > PATH_FLAG_THRESHOLD);

            float2 b1 = lastB;
            float2 b2 = newPathFlagB ? firstB : newB;

            // World positions for B edge
            EnsureNoPathMarker(b1);
            EnsureNoPathMarker(b2);
            float2 b1w = b1 + rbB.pos;
            float2 b2w = b2 + rbB.pos;

            // Quick bounding-box reject (cheap)
            float2 minA = min(a1w, a2w);
            float2 maxA = max(a1w, a2w);
            float2 minB = min(b1w, b2w);
            float2 maxB = max(b1w, b2w);
            if (maxA.x < minB.x || maxB.x < minA.x || maxA.y < minB.y || maxB.y < minA.y)
            {
                // no overlap in AABBs
            }
            else
            {
                float2 ip, dirA, dirB;
                if (SegmentsIntersectRB(a1w, a2w, b1w, b2w, ip, dirA, dirB))
                {
                    // Fill as if we hit B's edge: lineVec = B's tangent
                    info.hitPoint = ip;
                    info.pointPos = ip;           // zero penetration; let resolver fallback
                    info.lineVec  = normalize(dirB);
                    info.dst      = 0.0;
                    return true;
                }
            }

            if (newPathFlagB)
            {
                newB.x -= PATH_FLAG_OFFSET;
                firstB = newB;
                lastB = newB;
                pathStartB = idxB;
            }
            else
            {
                lastB = newB;
            }
        }

        if (newPathFlagA)
        {
            newA.x -= PATH_FLAG_OFFSET;
            firstA = newA;
            lastA = newA;
            pathStartA = idxA;
        }
        else
        {
            lastA = newA;
        }
    }

    return false;
}

void ResolveCollisionRB_RB(
    int rbAIndex,
    int rbBIndex,
    inout RigidBody rbA,
    inout RigidBody rbB,
    RBHitInfo rbHitInfo,
    bool AInsideB_BInsideA,
    inout float2 deltaVelA,
    inout float deltaRotVelA,
    inout float2 deltaVelB,
    inout float deltaRotVelB)
{
    deltaVelA = 0;
    deltaRotVelA = 0;
    deltaVelB = 0;
    deltaRotVelB = 0;

    bool canMoveA = (rbA.mass > 0);
    bool canMoveB = (rbB.mass > 0);
    bool canRotateA = (rbA.inertia > 0);
    bool canRotateB = (rbB.inertia > 0);

    float2 collisionPoint = rbHitInfo.hitPoint;

    float2 penetration = AInsideB_BInsideA
        ? (collisionPoint - rbHitInfo.pointPos)
        : (rbHitInfo.pointPos - collisionPoint);

    float penetrationDepth = length(penetration);

    float2 normal;
    if (penetrationDepth > 0.0)
    {
        normal = normalize(penetration);
    }
    else
    {
        float2 nCand = float2(rbHitInfo.lineVec.y, -rbHitInfo.lineVec.x);
        normal = AInsideB_BInsideA ? nCand : -nCand;
        penetrationDepth = RB_RBFixedCollisionCorrection; // small slop
    }

    float invMassA = canMoveA ? 1.0 / rbA.mass : 0;
    float invMassB = canMoveB ? 1.0 / rbB.mass : 0;
    float totalInvMass = invMassA + invMassB;
    if (totalInvMass == 0) return;

    float2 correction = ((penetrationDepth / totalInvMass) * RB_RBCollisionCorrectionFactor) * normal;
    if (canMoveA) rbA.pos -= correction * invMassA + RB_RBFixedCollisionCorrection * normal;
    if (canMoveB) rbB.pos += correction * invMassB + RB_RBFixedCollisionCorrection * normal;

    float2 rA = collisionPoint - rbA.pos;
    float2 rB = rbHitInfo.pointPos - rbB.pos;

    float2 rbAVel = Int2ToFloat2(rbA.vel_AsInt2, INT_FLOAT_PRECISION_RB)
                  + crossZ(IntToFloat(rbA.rotVel_AsInt, INT_FLOAT_PRECISION_RB_ROT), rA);
    float2 rbBVel = Int2ToFloat2(rbB.vel_AsInt2, INT_FLOAT_PRECISION_RB)
                  + crossZ(IntToFloat(rbB.rotVel_AsInt, INT_FLOAT_PRECISION_RB_ROT), rB);

    float2 relVel = rbBVel - rbAVel;
    float relVelAlongNormal = dot(relVel, normal);
    if (relVelAlongNormal >= 0.0) return;

    float e = min(rbA.rbElasticity, rbB.rbElasticity);

    float invInertiaA = canRotateA ? 1.0 / rbA.inertia : 0;
    float invInertiaB = canRotateB ? 1.0 / rbB.inertia : 0;

    float rACrossN = cross2D(rA, normal);
    float rBCrossN = cross2D(rB, normal);
    float denom = totalInvMass
                  + (rACrossN * rACrossN) * invInertiaA
                  + (rBCrossN * rBCrossN) * invInertiaB;
    if (denom == 0) return;

    float jn = -(1 + e) * relVelAlongNormal / denom;
    float2 impulseNormal = jn * normal;

    if (canMoveA) deltaVelA += -impulseNormal * invMassA;
    if (canMoveB) deltaVelB +=  impulseNormal * invMassB;
    if (canRotateA) deltaRotVelA += cross2D(rA, -impulseNormal) * invInertiaA;
    if (canRotateB) deltaRotVelB += cross2D(rB,  impulseNormal) * invInertiaB;

    float2 tangent = relVel - relVelAlongNormal * normal;
    float tangentSpeed = length(tangent);
    if (tangentSpeed > EPSILON)
    {
        float2 tangentDir = tangent / tangentSpeed;
        float jt = -dot(relVel, tangentDir) / denom;

        float mu = min(rbA.friction, rbB.friction);
        float maxFriction = mu * jn;
        jt = clamp(jt, -maxFriction, maxFriction);

        float2 impulseFriction = jt * tangentDir;
        if (canMoveA) deltaVelA += -impulseFriction * invMassA;
        if (canMoveB) deltaVelB +=  impulseFriction * invMassB;
        if (canRotateA) deltaRotVelA += cross2D(rA, -impulseFriction) * invInertiaA;
        if (canRotateB) deltaRotVelB += cross2D(rB,  impulseFriction) * invInertiaB;

        float2 frictionForce = impulseFriction / DeltaTime;
        float2 frictionForceNormalized = frictionForce * 0.001;
        int2 frictionForce_Int2 = Float2AsInt2(frictionForceNormalized, INT_FLOAT_PRECISION_RB);
        AccumulateFrictionForce(rbAIndex, frictionForce_Int2);
        AccumulateFrictionForce(rbBIndex, frictionForce_Int2);
    }
}

[numthreads(TN_RBS2,1,1)]
void SimulateRB_RB(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NumRigidBodies) return;
    uint rbAIndex = id.x;
    RigidBody baseRB = RigidBodies[rbAIndex];

    bool isNotRBCollider = (baseRB.rbElasticity == -1);
    if (isNotRBCollider) return;
    
    #if !DO_USE_FAST_COMPILATION
    #endif
    for (uint rbBIndex = rbAIndex + 1; rbBIndex < NumRigidBodies; rbBIndex++)
    {
        RigidBody rbA = baseRB;
        RigidBody rbB = RigidBodies[rbBIndex];
        
        bool rigidConstraintFlagA = (rbA.springStiffness == 0);
        bool rigidConstraintFlagB = (rbB.springStiffness == 0);
        bool isNotRBColliderB = (rbB.rbElasticity == -1);
        bool rigidConstraint = (
            ((int)rbAIndex == rbB.linkedRBIndex && rigidConstraintFlagB)
         || ((int)rbBIndex == rbA.linkedRBIndex && rigidConstraintFlagA)
         || !AllowLinkedRBCollisions
        );
        bool bothStationary = (rbA.mass == 0 && rbB.mass == 0 && rbA.inertia == 0 && rbB.inertia == 0);
        if (bothStationary || rigidConstraint || isNotRBColliderB) continue;

        float2 posRecA = rbA.pos;
        float2 posRecB = rbB.pos;

        float dst = length(rbB.pos - rbA.pos);
        float radiusSum = sqrt(abs(rbA.maxRadiusSqr)) + sqrt(abs(rbB.maxRadiusSqr));
        if (dst > radiusSum) continue;
        
        RBHitInfo rbHitInfo = InitRBHitInfo();
        bool collisionDetected = false;

        float2 deltaVelA = 0;
        float2 deltaVelB = 0;
        float deltaRotVelA = 0;
        float deltaRotVelB = 0;

        // --- 1) A's vertices inside B ---
        uint startIndexA = rbA.startIndex;
        uint endIndexA = rbA.endIndex;
        for (uint vecIndex = startIndexA; vecIndex <= endIndexA && !collisionDetected; vecIndex++)
        {
            float2 vertexA = RBVectors[vecIndex].pos;
            EnsureNoPathMarker(vertexA);
            vertexA += rbA.pos;

            bool isInside = IsPointInsideRB(vertexA, rbB);
            if (!isInside) continue;

            rbHitInfo = RayRBDstHitInfo(vertexA, rbB);
            collisionDetected = true;
            bool AInsideB_BInsideA = false;

            ResolveCollisionRB_RB(rbAIndex, rbBIndex, rbA, rbB, rbHitInfo, AInsideB_BInsideA,
                                  deltaVelA, deltaRotVelA, deltaVelB, deltaRotVelB);
        }

        // --- 2) B's vertices inside A ---
        uint startIndexB = rbB.startIndex;
        uint endIndexB = rbB.endIndex;
        for (uint vecIndexB = startIndexB; vecIndexB <= endIndexB && !collisionDetected; vecIndexB++)
        {
            float2 vertexB = RBVectors[vecIndexB].pos;
            EnsureNoPathMarker(vertexB);
            vertexB += rbB.pos;

            bool isInside = IsPointInsideRB(vertexB, rbA);
            if (!isInside) continue;

            rbHitInfo = RayRBDstHitInfo(vertexB, rbA);
            collisionDetected = true;
            bool AInsideB_BInsideA = true;

            ResolveCollisionRB_RB(rbAIndex, rbBIndex, rbA, rbB, rbHitInfo, AInsideB_BInsideA,
                                  deltaVelA, deltaRotVelA, deltaVelB, deltaRotVelB);
        }

        // Edge–Edge intersection ---
        if (!collisionDetected)
        {
            bool aInsideB_BInsideA_dummy = false;
            RBHitInfo edgeInfo;
            if (FindRB_EdgeEdgeContact(rbA, rbB, edgeInfo, aInsideB_BInsideA_dummy))
            {
                collisionDetected = true;
                ResolveCollisionRB_RB(rbAIndex, rbBIndex, rbA, rbB, edgeInfo, aInsideB_BInsideA_dummy,
                                      deltaVelA, deltaRotVelA, deltaVelB, deltaRotVelB);
            }
        }

        if (collisionDetected)
        {
            int2 deltaVelA_Int2 = Float2AsInt2(deltaVelA, INT_FLOAT_PRECISION_RB);
            int2 deltaVelB_Int2 = Float2AsInt2(deltaVelB, INT_FLOAT_PRECISION_RB);
            AccumulateDeltaVel(rbAIndex, deltaVelA_Int2);
            AccumulateDeltaVel(rbBIndex, deltaVelB_Int2);

            int deltaRotVelA_Int = FloatAsInt(deltaRotVelA, INT_FLOAT_PRECISION_RB_ROT);
            int deltaRotVelB_Int = FloatAsInt(deltaRotVelB, INT_FLOAT_PRECISION_RB_ROT);
            AccumulateDeltaRotVel(rbAIndex, deltaRotVelA_Int);
            AccumulateDeltaRotVel(rbBIndex, deltaRotVelB_Int);

            float2 deltaPosA = rbA.pos - posRecA;
            float2 deltaPosB = rbB.pos - posRecB;
            int2 deltaPosA_int2 = Float2AsInt2(deltaPosA, INT_FLOAT_PRECISION_RB);
            int2 deltaPosB_int2 = Float2AsInt2(deltaPosB, INT_FLOAT_PRECISION_RB);
            AccumulateDeltaPos(rbAIndex, deltaPosA_int2);
            AccumulateDeltaPos(rbBIndex, deltaPosB_int2);
        }
    }
}

bool IsDataValid(RBAdjustment data)
{
    if (length(Int2ToFloat2(data.deltaPos_Int2, INT_FLOAT_PRECISION_RB)) > 2000) return false;
    if (length(Int2ToFloat2(data.deltaVel_Int2, INT_FLOAT_PRECISION_RB)) > 2000) return false;
    if (abs(IntToFloat(data.deltaRotVel_Int, INT_FLOAT_PRECISION_RB_ROT)) > 2000) return false;
    return true;
}

[numthreads(TN_RBS2,1,1)]
void AdjustRBDatas(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NumRigidBodies) return;
    uint rbIndex = id.x;

    RBAdjustment rbAdjustment = RBAdjustments[rbIndex];
    RBAdjustments[rbIndex] = InitRBAdjustment();
    
    if (!IsDataValid(rbAdjustment)) return;

    RigidBodies[rbIndex].pos += Int2ToFloat2(rbAdjustment.deltaPos_Int2, INT_FLOAT_PRECISION_RB);
    RigidBodies[rbIndex].vel_AsInt2 += rbAdjustment.deltaVel_Int2;
    RigidBodies[rbIndex].rotVel_AsInt += rbAdjustment.deltaRotVel_Int;
    RigidBodies[rbIndex].recordedSpringForce = Int2ToFloat2(rbAdjustment.recordedSpringForce_Int2, INT_FLOAT_PRECISION_RB);
    RigidBodies[rbIndex].recordedFrictionForce = lerp(RigidBodies[rbIndex].recordedFrictionForce, Int2ToFloat2(rbAdjustment.recordedFrictionForce_Int2, INT_FLOAT_PRECISION_RB), 0.05);
}

void ResolveCollisionRB_P(
    inout PData pData,
    float pMass,
    RigidBody rb,
    out float deltaRotVel,
    out float2 deltaCenterVel)
{
    deltaRotVel = 0;
    deltaCenterVel = 0;

    RBHitInfo rbHitInfo = RayRBDstHitInfo(pData.pos, rb);

    float2 collisionPoint  = rbHitInfo.hitPoint;
    float2 collisionNormal = float2(rbHitInfo.lineVec.y, -rbHitInfo.lineVec.x);

    float2 dstToCollisionPoint = collisionPoint - rb.pos;
    float2 rotVelAtCollisionPoint = float2(-dstToCollisionPoint.y, dstToCollisionPoint.x) * IntToFloat(rb.rotVel_AsInt, INT_FLOAT_PRECISION_RB_ROT);
    float2 rbVel = Int2ToFloat2(rb.vel_AsInt2, INT_FLOAT_PRECISION_RB) + rotVelAtCollisionPoint;
    float2 relVel = pData.vel - rbVel;

    float relVelAlongNormal = dot(relVel, collisionNormal);
    if (relVelAlongNormal >= 0.0) return;

    float2 mirrorRelVel = relVel - (1.0 + rb.fluidElasticity)
                                  * relVelAlongNormal
                                  * collisionNormal;
    float2 newPVel = mirrorRelVel + rbVel;
    float2 oldPVel = pData.vel;
    pData.vel = newPVel;

    float penetrationDepth = dot(pData.pos - collisionPoint, collisionNormal);
    if (penetrationDepth < 0.0)
    {
        pData.pos -= penetrationDepth * collisionNormal - rotVelAtCollisionPoint * DeltaTime;
    }

    bool canMove   = (rb.mass > 0);
    bool canRotate = (rb.inertia > 0);
    if (!canMove && !canRotate) return;

    float2 pImpulse = pMass * (newPVel - oldPVel);
    float2 rbImpulse = -pImpulse;

    float2 dst = collisionPoint - rb.pos;
    float torque = cross2D(dst, rbImpulse);

    deltaCenterVel = canMove   ? (rbImpulse / rb.mass) : 0;
    deltaRotVel    = canRotate ? (torque / rb.inertia) : 0;

    {
        float2 collisionForce = -pImpulse / DeltaTime;
        int lastChunkKey = Extract_LastChunkKey(pData.lastChunkKey_PType_POrder);
        int2 collisionForce_Int2 = Float2AsInt2(collisionForce, INT_FLOAT_PRECISION_RB);
        InterlockedAdd(RecordedFluidDatas[lastChunkKey].totRigidBodyForces_Int2.x, collisionForce_Int2.x);
        InterlockedAdd(RecordedFluidDatas[lastChunkKey].totRigidBodyForces_Int2.y, collisionForce_Int2.y);
    }
}

int Extract_PType(int LastChunkKey_PType_POrder)
{
    return ((uint)LastChunkKey_PType_POrder % (ChunksNumAll * PTypesNum)) / ChunksNumAll;
}

[numthreads(TN_RBS3,1,1)]
void SimulateRB_P(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NumParticles) return;

    uint pIndex = SpatialLookup[id.x].x;
    PData pData = PDatas[pIndex];
    PType pType = PTypes[Extract_PType(pData.lastChunkKey_PType_POrder)];
    float pMass = pType.mass;

    bool pDataModified = false;
    for (int rbIndex = 0; rbIndex < (int)NumRigidBodies; rbIndex++)
    {
        RigidBody rb = RigidBodies[rbIndex];

        bool isNotFluidCollider = (rb.fluidElasticity == -1);
        if (isNotFluidCollider) continue;

        if (dot2(rb.pos - pData.pos) <= abs(rb.maxRadiusSqr))
        {
            bool isInside = IsPointInsideRB(pData.pos, rb);
            if (isInside)
            {
                float deltaRotVel;
                float2 deltaCenterVel;
                ResolveCollisionRB_P(pData, pMass, rb, deltaRotVel, deltaCenterVel);

                if (deltaCenterVel.x != 0 || deltaCenterVel.y != 0)
                {
                    int2 deltaCenterVel_Int2 = Float2AsInt2(deltaCenterVel, INT_FLOAT_PRECISION_RB);
                    AccumulateDeltaVel(rbIndex, deltaCenterVel_Int2);
                }
                if (deltaRotVel != 0)
                {
                    int deltaRotVel_Int = FloatAsInt(deltaRotVel, INT_FLOAT_PRECISION_RB_ROT);
                    AccumulateDeltaRotVel(rbIndex, deltaRotVel_Int);
                }

                float heatingStrength = rb.heatingStrength;
                if (heatingStrength != 0)
                {
                    pData.temperature += rb.heatingStrength * pType.thermalConductivity * DeltaTime / pType.specificHeatCapacity;
                }

                pDataModified = true;
            }
        }
    }

    if (pDataModified) PDatas[pIndex] = pData;
}

bool IsNearBoundary(float2 pos, float maxRadiusDstSqr)
{
    float maxRadiusDst = sqrt(maxRadiusDstSqr);
    return (pos.x - maxRadiusDst <= RigidBodyPadding)
        || (pos.x + maxRadiusDst >= BoundaryDims.x - RigidBodyPadding)
        || (pos.y - maxRadiusDst <= RigidBodyPadding)
        || (pos.y + maxRadiusDst >= BoundaryDims.y - RigidBodyPadding);
}

void GetRBBounds(RigidBody rb,
    inout float2 boundsMin, inout float2 boundsMax,
    inout float2 minXVec, inout float2 maxXVec,
    inout float2 minYVec, inout float2 maxYVec)
{
    uint startIndex = rb.startIndex;
    uint endIndex = rb.endIndex;
    for (uint vecIndex = startIndex; vecIndex <= endIndex; vecIndex++)
    {
        float2 localVec = RBVectors[vecIndex].pos;
        EnsureNoPathMarker(localVec);
        float2 worldVec = rotate2D(localVec, rb.totRot) + rb.pos;

        boundsMin = min(boundsMin, worldVec);
        boundsMax = max(boundsMax, worldVec);

        if (worldVec.x < minXVec.x) minXVec = worldVec;
        if (worldVec.x > maxXVec.x) maxXVec = worldVec;
        if (worldVec.y < minYVec.y) minYVec = worldVec;
        if (worldVec.y > maxYVec.y) maxYVec = worldVec;
    }
}

float2 interactionAcceleration(inout RigidBody rb)
{
    if (rb.maxRadiusSqr <= 0) return 0;

    float2 dst = rb.pos - MousePos;
    float absDst = length(dst);

    bool isBeingDragged = LMousePressed && (ReadBit(rb.stateFlags, 0) || absDst < RB_MaxInteractionRadius);
    bool isBeingRepelled = RMousePressed && absDst < RB_MaxInteractionRadius;

    SetBit(rb.stateFlags, 0, isBeingDragged);

    if (!isBeingDragged && !isBeingRepelled) return 0;

    float factor = RB_InteractionAttractionPower;
    if (isBeingRepelled) factor *= -1;

    float interactionStrengthDragging = 20 * sqrt(absDst);
    float interactionStrengthRepulsion = 1.5 * (RB_MaxInteractionRadius - absDst);

    float2 normDst = dst / absDst;
    float2 interactionGradient = isBeingDragged ?
                                 normDst * interactionStrengthDragging + RB_InteractionDampening * Int2ToFloat2(rb.vel_AsInt2, INT_FLOAT_PRECISION_RB) - float2(0, rb.gravity) :
                                 normDst * interactionStrengthRepulsion;
    float2 interactionAcceleration = interactionGradient * factor;

    return -interactionAcceleration;
}

[numthreads(TN_RBS3,1,1)]
void SimulateRBSprings(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NumRigidBodies) return;
    uint i = id.x;

    RigidBody rbA = RigidBodies[i];

    bool isLinked = (rbA.linkedRBIndex != -1 && rbA.linkedRBIndex != (int)i);
    if (!isLinked) return;

    RigidBody rbB = RigidBodies[rbA.linkedRBIndex];

    float2 linkPosA = rotate2D(rbA.localLinkPosThisRB, rbA.totRot);
    float2 linkPosB = rotate2D(rbA.localLinkPosOtherRB, rbB.totRot);

    float2 worldLinkPosA = rbA.pos + linkPosA;
    float2 worldLinkPosB = rbB.pos + linkPosB;

    float stiffness = rbA.springStiffness;
    float springRestLength = rbA.springRestLength;
    float damping = rbA.damping;

    float2 deltaVelA = 0;
    float deltaRotVelA = 0;
    float2 deltaVelB = 0;
    float deltaRotVelB = 0;

    float invMassA = (rbA.mass > 0) ? 1.0 / rbA.mass : 0;
    float invMassB = (rbB.mass > 0) ? 1.0 / rbB.mass : 0;
    float invInertiaA = (rbA.inertia > 0) ? 1.0 / rbA.inertia : 0;
    float invInertiaB = (rbB.inertia > 0) ? 1.0 / rbB.inertia : 0;

    float totalForceMagnitude = 0;
    float2 totSpringForce = 0;
    bool rigidConstraint = (stiffness == 0.0);
    if (rigidConstraint)
    {
        float2 constraintError = worldLinkPosB - worldLinkPosA;
        float totalInvMass = invMassA + invMassB;
        if (totalInvMass == 0) return;

        float2 correction = constraintError / totalInvMass;
        correction *= DeltaTime * RB_RBRigidConstraintCorrectionFactor;

        float2 correctionA = correction * invMassA;
        float2 correctionB = -correction * invMassB;

        rbA.pos += correctionA;
        rbB.pos += correctionB;

        int2 deltaPosA_Int2 = Float2AsInt2(correctionA, INT_FLOAT_PRECISION_RB);
        int2 deltaPosB_Int2 = Float2AsInt2(correctionB, INT_FLOAT_PRECISION_RB);
        AccumulateDeltaPos(i, deltaPosA_Int2);
        AccumulateDeltaPos(rbA.linkedRBIndex, deltaPosB_Int2);

        float2 velAtLinkA = Int2ToFloat2(rbA.vel_AsInt2, INT_FLOAT_PRECISION_RB)
                          + crossZ(IntToFloat(rbA.rotVel_AsInt, INT_FLOAT_PRECISION_RB_ROT), linkPosA);
        float2 velAtLinkB = Int2ToFloat2(rbB.vel_AsInt2, INT_FLOAT_PRECISION_RB)
                          + crossZ(IntToFloat(rbB.rotVel_AsInt, INT_FLOAT_PRECISION_RB_ROT), linkPosB);

        float2 relVel = velAtLinkA - velAtLinkB;
        float2 direction = normalize(constraintError);
        float relVelAlongConstraint = dot(relVel, direction);

        float rACrossN = cross2D(linkPosA, direction);
        float rBCrossN = cross2D(linkPosB, direction);
        float denom = invMassA + invMassB
                      + (rACrossN * rACrossN) * invInertiaA
                      + (rBCrossN * rBCrossN) * invInertiaB;
        if (denom == 0) return;

        float j = -relVelAlongConstraint / denom;
        float2 impulse = j * direction;

        if (invMassA > 0) deltaVelA += impulse * invMassA;
        if (invMassB > 0) deltaVelB -= impulse * invMassB;

        if (invInertiaA > 0) deltaRotVelA += cross2D(linkPosA, impulse) * invInertiaA;
        if (invInertiaB > 0) deltaRotVelB -= cross2D(linkPosB, impulse) * invInertiaB;
    }
    else
    {
        float2 r = worldLinkPosA - worldLinkPosB;
        float currentLength = length(r);
        if (currentLength == 0.0) return;

        float2 direction = r / currentLength;
        float displacement = currentLength - springRestLength;

        float springForceMagnitude = -stiffness * displacement;

        float2 velAtLinkA = Int2ToFloat2(rbA.vel_AsInt2, INT_FLOAT_PRECISION_RB)
                          + crossZ(IntToFloat(rbA.rotVel_AsInt, INT_FLOAT_PRECISION_RB_ROT), linkPosA);
        float2 velAtLinkB = Int2ToFloat2(rbB.vel_AsInt2, INT_FLOAT_PRECISION_RB)
                          + crossZ(IntToFloat(rbB.rotVel_AsInt, INT_FLOAT_PRECISION_RB_ROT), linkPosB);

        float2 relVel = velAtLinkA - velAtLinkB;
        float relVelAlongSpring = dot(relVel, direction);

        float dampingForceMagnitude = -damping * relVelAlongSpring;
        totalForceMagnitude = springForceMagnitude + dampingForceMagnitude;
        totSpringForce = totalForceMagnitude * direction;

        if (invMassA > 0) deltaVelA += totSpringForce * invMassA * DeltaTime;
        if (invMassB > 0) deltaVelB += (-totSpringForce) * invMassB * DeltaTime;

        if (invInertiaA > 0)
            deltaRotVelA += cross2D(linkPosA, totSpringForce) * invInertiaA * DeltaTime;
        if (invInertiaB > 0)
            deltaRotVelB += cross2D(linkPosB, -totSpringForce) * invInertiaB * DeltaTime;
    }

    int2 deltaVelA_Int2 = Float2AsInt2(deltaVelA, INT_FLOAT_PRECISION_RB);
    int2 deltaVelB_Int2 = Float2AsInt2(deltaVelB, INT_FLOAT_PRECISION_RB);
    AccumulateDeltaVel(i, deltaVelA_Int2);
    AccumulateDeltaVel(rbA.linkedRBIndex, deltaVelB_Int2);

    int deltaRotVelA_Int = FloatAsInt(deltaRotVelA, INT_FLOAT_PRECISION_RB_ROT);
    int deltaRotVelB_Int = FloatAsInt(deltaRotVelB, INT_FLOAT_PRECISION_RB_ROT);
    AccumulateDeltaRotVel(i, deltaRotVelA_Int);
    AccumulateDeltaRotVel(rbA.linkedRBIndex, deltaRotVelB_Int);

    if (!AreAllComponentsEqualTo(totSpringForce, 0.0))
    {
        float2 springForceNormalized = totSpringForce * 0.001;
        int2 recordedSpringForce_Int2 = Float2AsInt2(springForceNormalized, INT_FLOAT_PRECISION_RB);
        AccumulateSpringForce(i, recordedSpringForce_Int2);
    }
}

int SafeAsInt(int asInt, float max)
{
    if (asInt == 0) return 0;

    float asFloat = IntToFloat(asInt, INT_FLOAT_PRECISION_RB_ROT);
    asFloat = sign(asFloat) * min(abs(asFloat), max);
    int newAsInt = FloatAsInt(asFloat, INT_FLOAT_PRECISION_RB_ROT);
    return newAsInt;
}

void ResolveCollisionRB_Boundary(inout RigidBody rb, float2 collisionPoint, float2 normal, uint rbIndex)
{
    float2 r = collisionPoint - rb.pos;

    float2 rbRotVelAtCollisionPoint = crossZ(IntToFloat(rb.rotVel_AsInt, INT_FLOAT_PRECISION_RB_ROT), r);
    float2 rbVel = Int2ToFloat2(rb.vel_AsInt2, INT_FLOAT_PRECISION_RB) + rbRotVelAtCollisionPoint;

    float2 relVel = rbVel;
    float relVelAlongNormal = dot(relVel, normal);
    if (relVelAlongNormal >= 0.0) return;

    float invMass    = (rb.mass    > 0) ? 1.0 / rb.mass    : 0;
    float invInertia = (rb.inertia > 0) ? 1.0 / rb.inertia : 0;

    float rCrossN = cross2D(r, normal);
    float denom = invMass + (rCrossN * rCrossN) * invInertia;
    if (denom == 0) return;

    float elasticity = (rb.rbElasticity < 0) ? 0.5 : rb.rbElasticity;
    float jn = -(1 + min(elasticity, BoundaryElasticity)) * relVelAlongNormal / denom;

    float2 impulseNormal = jn * normal;
    rb.vel_AsInt2 += Float2AsInt2(impulseNormal * invMass, INT_FLOAT_PRECISION_RB);

    float deltaRotVel = cross2D(r, impulseNormal) * invInertia;
    rb.rotVel_AsInt += FloatAsInt(deltaRotVel, INT_FLOAT_PRECISION_RB_ROT);

    // --- Friction ---
    float2 tangent = relVel - relVelAlongNormal * normal;
    float tangentSpeed = length(tangent);
    if (tangentSpeed > EPSILON)
    {
        float2 tangentDir = tangent / tangentSpeed;
        float jt = -dot(relVel, tangentDir) / denom;

        float mu = min(rb.friction, BoundaryFriction);
        float maxFriction = mu * abs(jn);
        jt = clamp(jt, -maxFriction, maxFriction);

        float2 impulseFriction = jt * tangentDir;
        rb.vel_AsInt2 += Float2AsInt2(impulseFriction * invMass, INT_FLOAT_PRECISION_RB);

        float deltaRotVelFriction = cross2D(r, impulseFriction) * invInertia;
        rb.rotVel_AsInt += FloatAsInt(deltaRotVelFriction, INT_FLOAT_PRECISION_RB_ROT);

        float2 frictionForce = impulseFriction / DeltaTime;
        float2 frictionForceNormalized = frictionForce * 0.001;
        int2 frictionForce_Int2 = Float2AsInt2(frictionForceNormalized, INT_FLOAT_PRECISION_RB);
        AccumulateFrictionForce(rbIndex, frictionForce_Int2);
    }

    float c =
        (normal.x > 0.5)  ?  RigidBodyPadding :
        (normal.x < -0.5) ? -(BoundaryDims.x - RigidBodyPadding) :
        (normal.y > 0.5)  ?  RigidBodyPadding :
                            -(BoundaryDims.y - RigidBodyPadding);

    float signedDist = dot(normal, collisionPoint) - c;
    float penetration = max(-signedDist, 0.0);

    if (penetration > 0.0)
    {
        // small slop + mild Baumgarte to avoid jitter
        const float slop = 0.01;
        const float beta = 0.2;
        float correctionMag = max(penetration - slop, 0.0) * beta;
        rb.pos += correctionMag * normal;
    }

    {
        float2 totalImpulse = -impulseNormal;
        float2 boundaryForce = totalImpulse / DeltaTime;
        int2 chunk = GetChunk(collisionPoint);
        int chunkKey = GetChunkKey(chunk);
        int2 boundaryForce_Int2 = Float2AsInt2(boundaryForce, INT_FLOAT_PRECISION_RB);
        InterlockedAdd(RecordedFluidDatas[chunkKey].totRigidBodyForces_Int2.x, boundaryForce_Int2.x);
        InterlockedAdd(RecordedFluidDatas[chunkKey].totRigidBodyForces_Int2.y, boundaryForce_Int2.y);
    }
}

[numthreads(TN_RBS1,1,1)]
void ResetRBVertices(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NumVectors) return;
    uint i = id.x;

    RBVector rbVector = RBVectors[i];

    bool newPathFlag = EnsureNoPathMarker(rbVector.pos);

    RBVectors[i].pos = rotate(rbVector.pos, -RigidBodies[rbVector.parentIndex].totRot) + float2((newPathFlag ? PATH_FLAG_OFFSET : 0.0), 0.0);
}

float2 ClampMouseDeltaForMaxSpeed(float2 baseVel, float2 deltaMouse, float maxSpeed)
{
    float max2 = maxSpeed * maxSpeed;
    float base2 = dot(baseVel, baseVel);
    float2 proposed = baseVel + deltaMouse;
    float proposed2 = dot(proposed, proposed);
    if (base2 >= max2)
    {
        if (proposed2 < base2) return deltaMouse;
        return 0;
    }
    if (proposed2 <= max2) return deltaMouse;
    float len = length(proposed);
    if (len <= EPSILON) return 0;
    float2 allowed = proposed * (maxSpeed / len);
    return allowed - baseVel;
}

[numthreads(TN_RBS2,1,1)]
void UpdateRigidBodies(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NumRigidBodies) return;
    uint i = id.x;

    RigidBody rb = RigidBodies[i];

    if (rb.inertia > 0)
    {
        rb.rotVel_AsInt = SafeAsInt(rb.rotVel_AsInt, MaxRBRotVel);
        rb.totRot += IntToFloat(rb.rotVel_AsInt, INT_FLOAT_PRECISION_RB_ROT) * DeltaTime;
    }
    
    bool isLinearMotor = rb.mass < 0;
    bool canMove = rb.mass > 0;
    if (isLinearMotor)
    {
        bool doRoundTrip = (rb.mass == -2);

        float2 startAnchor = rb.localLinkPosThisRB;
        float2 endAnchor = rb.localLinkPosOtherRB;
        
        float t0 = rb.lerpSpeed * SimTimeElapsed + rb.lerpTimeOffset;
        float t;
        float dt_dt0;

        if (doRoundTrip)
        {
            t = (sin((t0 + 0.75) * PI * 2.0) + 1.0) * 0.5;
            dt_dt0 = PI * cos(2.0 * PI * (t0 + 0.75));
        }
        else
        {
            t = fmod(t0, 1.0);
            dt_dt0 = 1.0;
        }

        float2 lerpPos = lerp(startAnchor, endAnchor, t);
        rb.pos = lerpPos;

        float2 vel = (endAnchor - startAnchor) * rb.lerpSpeed * dt_dt0;
        rb.vel_AsInt2 = Float2AsInt2(vel, INT_FLOAT_PRECISION_RB);
    }
    else if (canMove)
    {
        bool disallowBoundaryCollisions = ReadBit(rb.stateFlags, 1);
        if (IsNearBoundary(rb.pos, abs(rb.maxRadiusSqr)) && !disallowBoundaryCollisions)
        {
            float2 boundsMin = float2(1.#INF, 1.#INF);
            float2 boundsMax = float2(-1.#INF, -1.#INF);
            float2 minXVec = float2(1.#INF, 0);
            float2 maxXVec = float2(-1.#INF, 0);
            float2 minYVec = float2(0, 1.#INF);
            float2 maxYVec = float2(0, -1.#INF);

            GetRBBounds(rb, boundsMin, boundsMax, minXVec, maxXVec, minYVec, maxYVec);

            if (boundsMin.x <= RigidBodyPadding)
            {
                float2 collisionNormal = float2(1, 0);
                float2 collisionPoint  = minXVec;
                ResolveCollisionRB_Boundary(rb, collisionPoint, collisionNormal, i);
            }
            if (boundsMax.x >= (BoundaryDims.x - RigidBodyPadding))
            {
                float2 collisionNormal = float2(-1, 0);
                float2 collisionPoint  = maxXVec;
                ResolveCollisionRB_Boundary(rb, collisionPoint, collisionNormal, i);
            }
            if (boundsMin.y <= RigidBodyPadding)
            {
                float2 collisionNormal = float2(0, 1);
                float2 collisionPoint  = minYVec;
                ResolveCollisionRB_Boundary(rb, collisionPoint, collisionNormal, i);
            }
            if (boundsMax.y >= (BoundaryDims.y - RigidBodyPadding))
            {
                float2 collisionNormal = float2(0, -1);
                float2 collisionPoint  = maxYVec;
                ResolveCollisionRB_Boundary(rb, collisionPoint, collisionNormal, i);
            }
        }

        float2 totAcceleration = float2(0, -rb.gravity);
        bool isInteractable = (rb.maxRadiusSqr > 0);

        float2 vel = Int2ToFloat2(rb.vel_AsInt2, INT_FLOAT_PRECISION_RB);
        if (length(vel) > MinRBVelForMovement) rb.pos += vel * DeltaTime;

        float2 deltaPhys  = totAcceleration * DeltaTime;
        float2 deltaMouse = isInteractable ? (interactionAcceleration(rb) * RLDeltaTime) : 0;

        float2 baseVel = vel + deltaPhys;

        float2 clampedMouse = ClampMouseDeltaForMaxSpeed(baseVel, deltaMouse, MaxRBVel);

        float2 newVel = baseVel + clampedMouse;

        newVel *= (1.0 - rb.passiveDamping * DeltaTime);

        rb.vel_AsInt2 = Float2AsInt2(newVel, INT_FLOAT_PRECISION_RB);
    }

    RigidBodies[i] = rb;
}

[numthreads(TN_RBS1,1,1)]
void UpdateRBVertices(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NumVectors) return;
    uint i = id.x;

    RBVector rbVector = RBVectors[i];

    bool newPathFlag = EnsureNoPathMarker(rbVector.pos);

    RBVectors[i].pos = rotate(rbVector.pos, RigidBodies[rbVector.parentIndex].totRot) + float2((newPathFlag ? PATH_FLAG_OFFSET : 0.0), 0.0);
}